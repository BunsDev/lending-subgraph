"""
The Joetroller type has protocol level variables stored
"""
type Joetroller @entity {
    "ID is set to 1"
    id: ID!
    # Address of price oracle the joetroller uses
    priceOracle: Bytes
    # Factor used to determine repayAmount for liquidating
    closeFactor: BigInt
    # The percent bonus liquidators get for liquidating
    liquidationIncentive: BigInt
    # Max assets a single user can enter
    maxAssets: BigInt
}

"""
Market stores all high level variables for a jToken market
"""
type Market @entity {
    #Fields that match compounds API
    "JToken address"
    id: ID!
    "Yearly borrow rate. With 31,536,000 secs per year"
    borrowRate: BigDecimal!
    "Yearly supply rate. With 31,536, 000 secs per year"
    supplyRate: BigDecimal!
    # The jToken contract balance of ERC20 or AVAX
    cash: BigDecimal!
    # Collateral factor determining how much one can borrow
    collateralFactor: BigDecimal!
    # Exchange rate of tokens / jTokens
    exchangeRate:  BigDecimal!
    # Address of the interest rate model
    interestRateModelAddress: Bytes!
    # Name of the jToken
    name: String!
    # Reserves stored in the contract
    reserves: BigDecimal!
    # JToken symbol
    symbol: String!
    # Borrows in the market
    totalBorrows: BigDecimal!
    "JToken supply. JTokens have 8 decimals"
    totalSupply: BigDecimal!
    # Underlying token address
    underlyingAddress: Bytes!
    # Underlying token name
    underlyingName: String!
    # Underlying token symbol
    underlyingSymbol: String!

    # Fields that are not in compounds api
    # Block the market is updated to"
    accrualBlockTimestamp: Int!
    # Timestamp the market was most recently updated
    blockTimestamp: Int!
    # The history of the markets borrow index return (Think S&P 500)
    borrowIndex: BigDecimal!
    # The factor determining interest that goes to reserves
    reserveFactor: BigInt!
    # Underlying token price in USD
    underlyingPriceUSD: BigDecimal!
    # Underlying token decimal length
    underlyingDecimals: Int!

     # Added to follow interests generation (@Amxx)
    # Total interest produced by borrowed assets
    totalInterestAccumulated: BigDecimal!
    # Total interest produced by borrowed assets (non decimal value)
    totalInterestAccumulatedExact: BigInt!
}

"""
Account is an AVAX C-chain address, with a list of all jToken markets the account has
participated in, along with liquidation information.
"""
type Account @entity {
    # User AVAX C-chain address
    id: ID!
    # Array of JTokens user is in
    tokens: [AccountJToken!]! @derivedFrom(field: "account")
    # Count user has been liquidated
    countLiquidated: Int!
    # Count user has liquidated others
    countLiquidator: Int!
    # True if user has ever borrowed
    hasBorrowed: Boolean!

    # The following values are added by the JS Wrapper, and must be calculated with the most up
    # to date values based on the timestamp delta for market.exchangeRate and market.borrowIndex
    # They do not need to be in the schema, but they will show up in the explorer playground

    # "If less than 1, the account can be liquidated
    health: BigDecimal!
    # "Total assets borrowed from user"
    totalBorrowValueInUSD: BigDecimal!
    # "Total assets supplied by user"
    totalCollateralValueInUSD: BigDecimal!
}

"""
AccountJToken is a single account within a single jToken market, with data such
as interest earned or paid
"""
type AccountJToken @entity {
    "Concatenation of JToken address and user address"
    id: ID!
    # Relation to market
    market: Market!
    # Symbol of the jToken
    symbol: String!
    # Relation to user
    account: Account!
    # Transactions data
    transactions: [AccountJTokenTransaction!]! @derivedFrom(field:"account")
    # Block timestamp this asset was updated at in the contract
    accrualBlockTimestamp: BigInt!
    # True if user is entered, false if they are exited
    enteredMarket: Boolean!

    # JToken balance of the user
    jTokenBalance: BigDecimal!
    # Total amount of underlying supplied
    totalUnderlyingSupplied: BigDecimal!
    # Total amount of underling redeemed
    totalUnderlyingRedeemed: BigDecimal!
    # The value of the borrow index upon users last interaction
    accountBorrowIndex: BigDecimal!
    # Total amount underlying borrowed, exclusive of interest
    totalUnderlyingBorrowed: BigDecimal!
    # Total amount underlying repaid
    totalUnderlyingRepaid: BigDecimal!
    # Current borrow balance stored in contract (exclusive of interest since accrualBlockTimestamp)
    storedBorrowBalance: BigDecimal!

    # The following values are added by the JS Wrapper, and must be calculated with the most up
    # to date values based on the timestamp delta for market.exchangeRate and market.borrowIndex
    # They do not need to be in the schema, but they will show up in the explorer playground

    supplyBalanceUnderlying: BigDecimal!
    # FORMULA: supplyBalanceUnderlying = jTokenBalance * market.exchangeRate

    lifetimeSupplyInterestAccrued: BigDecimal!
    # FORMULA: lifetimeSupplyInterestAccrued = supplyBalanceUnderlying - totalUnderlyingSupplied + totalUnderlyingRedeemed

    borrowBalanceUnderlying: BigDecimal!
    # FORMULA: borrowBalanceUnderlying = storedBorrowBalance * market.borrowIndex / accountBorrowIndex

    lifetimeBorrowInterestAccrued: BigDecimal!
    # FORMULA: lifetimeBorrowInterestAccrued = borrowBalanceUnderlying - totalUnderlyingBorrowed + totalUnderlyingRepaid
}

"""
Auxiliary entity for AccountJToken
"""
type AccountJTokenTransaction @entity {
  id: ID!

  account: AccountJToken!

  tx_hash: Bytes!

  timestamp: BigInt!

  block: BigInt!

  logIndex: BigInt!
}

"""
An interface for a transfer of any jToken. TransferEvent, MintEvent,
RedeemEvent, and LiquidationEvent all use this interface
"""
interface JTokenTransfer {
    # Transaction hash concatenated with log index
    id: ID!
    # jTokens transferred
    amount: BigDecimal!
    # Account that received tokens
    to: Bytes!
    # Account that sent tokens
    from: Bytes!
    # Block number
    blockNumber: Int!
    # Block time
    blockTime: Int!
    # Symbol of the jToken transferred
    jTokenSymbol: String!
}

"""
TransferEvent will be stored for every mint, redeem, liquidation, and any normal
transfer between two accounts.
"""
type TransferEvent implements JTokenTransfer @entity {
    # Transaction hash concatenated with log index
    id: ID!
    # jTokens transferred
    amount: BigDecimal!
    # Account that received tokens
    to: Bytes!
    # Account that sent tokens
    from: Bytes!
    # Block number
    blockNumber: Int!
    # Block time
    blockTime: Int!
    # Symbol of the jToken transferred
    jTokenSymbol: String!
}

"""
MintEvent stores information for mints. From address will always be a jToken
market address
"""
type MintEvent implements JTokenTransfer @entity {
    # Transaction hash concatenated with log index
    id: ID!
    # jTokens transferred
    amount: BigDecimal!
    # Account that received tokens (minter)
    to: Bytes!
    # Account that sent tokens (JToken contract)
    from: Bytes!
    # Block number
    blockNumber: Int!
    # Block time
    blockTime: Int!
    # Symbol of the jToken transferred
    jTokenSymbol: String!
    # Underlying token amount transferred
    underlyingAmount: BigDecimal
}

"""
RedeemEvent stores information for redeems. To address will always be a
jToken market address
"""
type RedeemEvent implements JTokenTransfer @entity {
    # Transaction hash concatenated with log index
    id: ID!
    # jTokens transferred
    amount: BigDecimal!
    # Account that received tokens (JToken contract)
    to: Bytes!
    # Account that sent tokens (redeemer)
    from: Bytes!
    # Block number
    blockNumber: Int!
    # Block time
    blockTime: Int!
    # Symbol of the jToken transferred
    jTokenSymbol: String!
    # Underlying token amount transferred
    underlyingAmount: BigDecimal
}

"""
LiquidationEvent stores information for liquidations. The event is emitted from
the jToken market address.
"""
type LiquidationEvent implements JTokenTransfer @entity {
    # Transaction hash concatenated with log index
    id: ID!
    # jTokens seized
    amount: BigDecimal!
    # Liquidator receiving tokens
    to: Bytes!
    # Account being liquidated (borrower)
    from: Bytes!
    # Block number
    blockNumber: Int!
    # Block time
    blockTime: Int!
    # jToken that was sezied as collateral
    jTokenSymbol: String!
    # Symbol of the underlying asset repaid through liquidation
    underlyingSymbol: String!
    # Underlying jToken amount that was repaid by liquidator
    underlyingRepayAmount: BigDecimal!
}

"""
Underlying transfers are transfers of underlying collateral for both borrows
and repays
"""
interface UnderlyingTransfer {
    # Transaction hash concatenated with log index
    id: ID!
    # Amount of underlying borrowed
    amount: BigDecimal!
    # Total borrows of this asset the account has
    accountBorrows: BigDecimal!
    # Account that borrowed the tokens
    borrower: Bytes!
    # Block number
    blockNumber: Int!
    # Block time
    blockTime: Int!
    # Symbol of the borrowed underlying asset
    underlyingSymbol: String!
}

"""
BorrowEvent stores information for borrows
"""
type BorrowEvent implements UnderlyingTransfer @entity {
    # Transaction hash concatenated with log index
    id: ID!
    # Amount of underlying borrowed
    amount: BigDecimal!
    # Total borrows of this asset the account has
    accountBorrows: BigDecimal!
    # Account that borrowed the tokens
    borrower: Bytes!
    # Block number
    blockNumber: Int!
    # Block time
    blockTime: Int!
    # Symbol of the borrowed underlying asset
    underlyingSymbol: String!
}

"""
RepayEvent stores information for repays. Payer is not always the same as
borrower, such as in the event of a Liquidation
"""
type RepayEvent implements UnderlyingTransfer @entity {
    # Transaction hash concatenated with log index
    id: ID!
    # Amount of underlying repaid
    amount: BigDecimal!
    # Total borrows of this asset the account has
    accountBorrows: BigDecimal!
    # Account that borrowed the tokens
    borrower: Bytes!
    # Block number
    blockNumber: Int!
    # Block time
    blockTime: Int!
    # Symbol of the borrowed underlying asset
    underlyingSymbol: String!
    # Payer of the borrow funds
    payer: Bytes!
}
